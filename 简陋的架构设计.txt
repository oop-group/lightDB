

大致架构：
	核心模块
		数据库
		数据表
		数据字段
	调度模块：操纵所有上述模块
	条件模块：判断各种情景
	SQL语句解析模块

核心模块：
	统一接口：对象和字符串or json相互转换（序列化和反序列化）
	
字段类：
	字段约束类：枚举所有可能出现的约束，如主键约束，自增约束，非空约束
	字段类型类：美剧所有可能出现的类型，如INT, VARCHAR等
	成员：数据类型，约束，默认值，数据数组，数据（记录）条数
	判断数据类型合法（属于字段类型类）
	判断约束类型合法（属于字段约束类）
	判断约束类型、数据类型、默认值自相矛盾

	检查下标合法
	检查值满足约束
	检查值满足类型
	
	增删查改（基于上述三个函数）

	私有成员访问接口

	序列化和反序列化

数据表类：
	成员：所有字段名称；字段名称-字段对象映射；记录条数
	插入{字段名：字段对象}，统一新的字段对象和表中已有字段对象的长度。
	查询（需要返回的字段名数组，是否降序，条件）：
		判断字段名是否合法
		调用解析条件，选出所有满足条件的行下标
		通过（字段名，行下表）返回记录数组
		如果降序，倒置
	删除（条件）：
		选出所有满足的行下标
		调用所有字段的delete函数
		更新记录条数
	修改（数据，条件）：
		选出。。。
		从条件中提取字段名
		调用这些字段名对应的字段的修改函数
	插入
		调用字段的add函数
	解析条件：根据条件判断模块中的判断类，遍历所有在条件中出现的字段。
		对每个字段，遍历上一次字段匹配成功的记录索引，如果匹配失败，删除索引。
		最终留下来的就是所有字段都匹配成功的记录索引。

	私有成员访问接口
	
	调用字段的序列化。。。

数据库模块中定义数据库类：
	成员：数据库名称；所有表名称；表名称-表对象映射；表数
	创建表
	删除表
	添加已有表
	调用数据表的序列化。。。

调度模块：
	成员：数据库名；库名称-库对象映射；库数；用户最近一次使用的库；文件路径
	初始化时读文件
	创建数据库
	创建表（调用最近一次使用的库的建表函数）
	删除数据库
	切换最近使用的库
	将所有数据库序列化后写入二进制文件
	读文件，构建所有数据库对象
	提交（写入文件）
	回滚（读文件）
	增删查改（调用数据表的增删查改）


条件判断：
	一个判断符号（=，！=等）和函数的映射表
	一个用于判断的基类（函数类）：	
		成员：判断符号，判断数值（如=3中的=和3）
		被当成函数调用时，先对判断数值进行合法判断，然后根据判断符号调用相应的判断函数
	一个判断符号对应一个判断类，继承自基类

SQL语句解析：
	从命令到正则表达式的映射表
	根据WHERE或where将命令和条件分开
	太难了以后再说

	
	
	

	




	





